referencing Pure

List class: Identifiable & <Element>Iterable {
	containing Element
	var size = 0
	var: Node? = null {
		head
		tail
	}

	computed isEmpty: Bool gets size == 0

	init

	init(...values: ...Element) {
		loop over values as value
			append(value)
	}

	init(value: Element, size: Int) {
		loop over Range(size)
			append(value)
	}

	to {
		prepend(element: Element) {
			val node = Node(element)
			if head? {
				node.nextNode = head
				head.previousNode = node
			} else {
				tail = node
			}
			head = node
			size++
		}

		insert(index: Int, element: Element) {
			if index == 0 {
				prepend(element)
				return
			}
			if index == size {
				append(element)
				return
			}
			var currentIndex = 1
			var previousNode: Node? = head
			loop while currentIndex < index {
				previousNode = previousNode?.nextNode
				currentIndex++
			}
			val nextNode = previousNode?.nextNode
			val node = Node(element)
			node.previousNode = previousNode
			previousNode?.nextNode = node
			node.nextNode = nextNode
			nextNode?.previousNode = node
			size++
		}

		append(element: Element) {
			val node = Node(element)
			if tail? {
				node.previousNode = tail
				tail.nextNode = node
			} else {
				head = node
			}
			tail = node
			size++
		}

		remove(element: Element) {
			var currentNode = head
			loop while currentNode? {
				if currentNode.element == element {
					if currentNode == head
						head = currentNode.nextNode
					if currentNode == tail
						tail = currentNode.previousNode
					currentNode.previousNode?.nextNode = currentNode.nextNode
					currentNode.nextNode?.previousNode = currentNode.previousNode
					currentNode.previousNode = null
					currentNode.nextNode = null
					size--
					break
				}
				currentNode = currentNode.nextNode
			}
		}

		clear() {
			head = null
			tail = null
			size = 0
		}
	}

	operator {
		[index: Int]: Element {
			loop over this as currentIndex, element
				if currentIndex == index
					return element
			raise Exception("The index '$index' is outside of the lists bounds.")
		}

		[index: Int](element: Element) {
			var currentIndex = 0
			var node: Node? = head
			loop while currentIndex < index {
				node = node?.nextNode
				currentIndex++
			}
			node?.element = element
		}
	}

	overriding to createIterator(): Iterator {
		return Iterator()
	}

	bound Node class {
		var: Node? = null {
			previousNode
			nextNode
		}
		var element: Element

		init(element)
	}

	bound Iterator class: Identifiable & <Int>IndexIterator & <Element>ValueIterator {
		var index = 0
		var currentNode = head
		overriding computed currentIndex gets index
		overriding computed currentValue: Element gets {
			val node = currentNode
			if !node?
				raise Exception("Cannot access current value of iterator, because it is done.")
			return node.element
		}
		overriding computed isDone gets !currentNode?
		
		overriding to advance() {
			currentNode = currentNode?.nextNode
			index++
		}
	}
}
