referencing Pure

Range class: <Iterator>Iterable {
	containing N: Number
	val: N {
		start
		end
		stepSize = 1
	}
	val: Bool {
		isStartInclusive = yes
		isEndInclusive = no
	}

	init(start, end)
	init(end) {
		start = 0
	}


	it contains(number: N): Bool {
		if isStartInclusive {
			if start > number
				return no
		} else {
			if start >= number
				return no
		}
		if isEndInclusive {
			if end < number
				return no
		} else {
			if end <= number
				return no
		}
		return yes
	}
		
	overriding to createIterator(): Iterator {
		return Iterator()
	}
	
	bound Iterator class: Identifiable & <N>ValueIterator {
		var value: N
		overriding computed currentValue gets value
		overriding computed isDone gets !contains(currentValue)
	
		init {
			if isStartInclusive
				value = start
			else
				value = (start + stepSize) as! N
		}
		
		overriding to advance() {
			value += stepSize
		}
	}
}
