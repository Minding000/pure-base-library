referencing Pure

Range class: <<N>RangeIterator>Iterable {
	containing N: Number
	val: N {
		start = 0
		end
		stepSize = 1
	}
	val: Bool {
		isStartInclusive = yes
		isEndInclusive = no
	}

	init(end)
	init(start, end)

	it contains(number: N): Bool {
		if isStartInclusive {
			if start > number
				return no
		} else {
			if start >= number
				return no
		}
		if isEndInclusive {
			if end < number
				return no
		} else {
			if end <= number
				return no
		}
		return yes
	}
		
	overriding to createIterator(): <N>RangeIterator {
		return RangeIterator(this)
	}
	
	RangeIterator class: <N>ValueIterator {
		containing N
		val range: <N>Range
		overriding var currentValue: N
		overriding val isDone gets !range.contains(currentValue)
	
		init(range) {
			if range.isStartInclusive
				currentValue = range.start
			else
				currentValue = range.start + range.stepSize
		}
		
		overriding to advance() {
			currentValue += range.stepSize
		}
	}
}
