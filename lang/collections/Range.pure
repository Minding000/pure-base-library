referencing Pure

Range class: <Iterator>Iterable {
	containing N: Number
	val: N {
		start = 0
		end
		stepSize = 1
	}
	val: Bool {
		isStartInclusive = yes
		isEndInclusive = no
	}

	init(end)
	init(start, end)

	it contains(number: N): Bool {
		if isStartInclusive {
			if start > number
				return no
		} else {
			if start >= number
				return no
		}
		if isEndInclusive {
			if end < number
				return no
		} else {
			if end <= number
				return no
		}
		return yes
	}
		
	overriding to createIterator(): Iterator {
		return Iterator()
	}
	
	Iterator class: <N>ValueIterator {
		overriding var currentValue: N
		overriding val isDone gets !contains(currentValue)
	
		init {
			if isStartInclusive
				currentValue = start
			else
				currentValue = start + stepSize
		}
		
		overriding to advance() {
			currentValue += stepSize
		}
	}
}
