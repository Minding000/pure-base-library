referencing Pure

Map class: Identifiable & <Value>Iterable {
	containing Key, Value
	var size = 0
	val keys = <Key>List()
	val values = <Value>List()

	computed isEmpty: Bool gets size == 0

	operator {
		[key: Key]: Value {
			loop over keys as index, currentKey {
				if currentKey == key
					return values[index]
			}
			raise Exception("Key '" + key + "' does not exist.")
		}

		[key: Key](value: Value) {
			loop over keys as index, currentKey {
				if currentKey == key {
					values[index] = value
					return
				}
			}
			keys.append(key)
			values.append(value)
			size++
		}
	}
	
	overriding to createIterator(): Iterator {
		return Iterator()
	}
	
	bound Iterator class: Identifiable & <Key>KeyIterator & <Value>ValueIterator {
		val keyIterator = keys.createIterator()
		overriding computed currentKey gets keyIterator.currentValue
		overriding computed currentValue gets this<Map>[currentKey]
		overriding computed isDone gets keyIterator.isDone
		
		overriding to advance() {
			keyIterator.advance()
		}
	}
}
